rin_region_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
rin_region_df = read.csv(rin_region_path)
rin_region_df$ind
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
table(regions_df$region)
length(regions_df$region)
table(regions_df$region)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
length(regions_df$region)
table(regions_df$region)
length(regions_df$region)
table(regions_df$region)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
length(regions_df$region)
table(regions_df$region)
length(regions_df$region)
table(regions_df$region, useNA=TRUE)
length(regions_df$region)
table(regions_df$region, useNA=1)
?table
length(regions_df$region)
table(regions_df$region, useNA='ifany')
fargen_rin
temp = regions_df %>% filter(ind %in% as.numeric(fargen_rin))
dim(temp)
table(temp$region, useNA='ifany')
regions_df = regions_df %>% filter(ind %in% as.numeric(fargen_rin))
table(regions_df$region, useNA='ifany')
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
table(regions_df$region, useNA='ifany')
regions_df = regions_df %>% filter(ind %in% as.numeric(fargen_rin))
table(regions_df$region, useNA='ifany')
fargen_rin = as.character(fargen_ids_df$rin)
kc_mat = kc_mat[fargen_rin, fargen_rin]
suppressMessages(gc())
fargen_rin = as.character(fargen_ids_df$rin)
kc_mat = kc_mat[fargen_rin, fargen_rin]
suppressWarnings(gc())
gc(verbose=FALSE)
fargen_rin = as.character(fargen_ids_df$rin)
kc_mat = kc_mat[fargen_rin, fargen_rin]
gc(verbose=TRUE)
fargen_rin = as.character(fargen_ids_df$rin)
kc_mat = kc_mat[fargen_rin, fargen_rin]
gc()
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
table(regions_df$region, useNA='ifany')
regions = regions_df$region
names(regions) = regions_df$ind
table(regions[as.numeric(fargen_rin)])
regions = regions_df$region
names(regions) = regions_df$ind
table(regions[as.numeric(fargen_rin)])
length(regions)
length(regions[as.numeric(fargen_rin)])
table(regions[as.numeric(fargen_rin)], useNA='ifany')
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
table(regions_df$region, useNA='ifany')
regions = regions_df$region
names(regions) = regions_df$ind
table(regions[as.numeric(fargen_rin)], useNA='ifany')
#regions_df = regions_df %>% filter(ind %in% as.numeric(fargen_rin))
#table(regions_df$region, useNA='ifany')
regions
names(regions)
regions = regions_df$region
names(regions) = regions_df$ind
table(regions[fargen_rin], useNA='ifany')
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[fargen_rin]
table(regions, useNA='ifany')
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[fargen_rin]
table(regions, useNA='ifany')
names(regions) == colnames(kc_mat)
sum(names(regions) == colnames(kc_mat))
sum(names(regions) != colnames(kc_mat))
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text=element_blank(), axis.title=element_blank(), axis.ticks=element_blank())
kc_pc <- prcomp(kc_mat, rank.=2, scale.=TRUE)
pc_df <- data.frame(kc_pc$x)
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text=element_blank(), axis.title=element_blank(), axis.ticks=element_blank())
unrelated_ids = pedigree.unrelated(ped_obj, ped_obj$id)
n_probands = length(fargen_rin)
fargen_rin = as.character(fargen_ids_df$rin)
n_probands = length(fargen_rin)
kc_mat = kc_mat[fargen_rin, fargen_rin]
gc()
# Kinship threshold.
kc_thres <- 2^-4
# A mask vector of which individuals to include.
mask_related <- rep(TRUE, n_probands)
# Keep track of indexes.
idx_proband <- seq(1, n_probands)
# Lower triangular matrix.
kc_tri <- kc_mat
kc_tri[upper.tri(kc_tri)] <- 0
diag(kc_tri) <- 0
# Check whether relationships above the specified degree exist.
cond <- sum(kc_tri > kc_thres) > 0
# While such relationships exist.
while(cond) {
# Count the number of first or second degree relationships per person.
n_related <- colSums(kc_tri[mask_related, mask_related] > kc_thres)
# Get the index of the individual with the highest number of these relationships.
# Resolve redundancies randomly by picking the first one.
idx <- idx_proband[mask_related][n_related == max(n_related)][1]
# Exclude this proband.
mask_related[idx] <- FALSE
# Update condition.
cond <- sum(kc_tri[mask_related, mask_related] > kc_thres) > 0
}
writeLines(sprintf("%d probands discarded due to high relatedness.", sum(!mask_related)))
temp = fargen_rin[mask_related]
sum(mask_related)
length(temp)
probands = fargen_rin[mask_related]
n_probands = length(probands)
proband_kc_mat = kc_mat[probands, probands]
gc()
probands = fargen_rin[mask_related]
n_probands = length(probands)
proband_kc_mat = kc_mat[probands, probands]
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
table(regions, useNA='ifany')
sum(names(regions) != colnames(proband_kc_mat))
kc_pc <- prcomp(proband_kc_mat, rank.=2, scale.=TRUE)
pc_df <- data.frame(kc_pc$x)
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank(),
panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.text=element_blank(), axis.title=element_blank(), axis.ticks=element_blank())
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank())
?table
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region, useNA='ifany')
tbl / sum(tbl)
sum(tbl / sum(tbl))
tbl / sum(tbl)
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
tbl = table(regions, useNA='ifany')
tbl / sum(tbl)
sum(names(regions) != colnames(proband_kc_mat))
kc_pc <- prcomp(proband_kc_mat, rank.=2, scale.=TRUE)
pc_df <- data.frame(kc_pc$x)
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank())
# Kinship threshold.
kc_thres <- 2^-6
# A mask vector of which individuals to include.
mask_related <- rep(TRUE, n_fargen)
n_fargen = length(fargen_rin)
# Kinship threshold.
kc_thres <- 2^-6
# A mask vector of which individuals to include.
mask_related <- rep(TRUE, n_fargen)
# Keep track of indexes.
idx_proband <- seq(1, n_fargen)
# Lower triangular matrix.
kc_tri <- kc_mat
kc_tri[upper.tri(kc_tri)] <- 0
diag(kc_tri) <- 0
# Check whether relationships above the specified degree exist.
cond <- sum(kc_tri > kc_thres) > 0
# While such relationships exist.
while(cond) {
# Count the number of first or second degree relationships per person.
n_related <- colSums(kc_tri[mask_related, mask_related] > kc_thres)
# Get the index of the individual with the highest number of these relationships.
# Resolve redundancies randomly by picking the first one.
idx <- idx_proband[mask_related][n_related == max(n_related)][1]
# Exclude this proband.
mask_related[idx] <- FALSE
# Update condition.
cond <- sum(kc_tri[mask_related, mask_related] > kc_thres) > 0
}
writeLines(sprintf("%d probands discarded due to high relatedness.", sum(!mask_related)))
# Kinship threshold.
kc_thres <- 2^-8
# A mask vector of which individuals to include.
mask_related <- rep(TRUE, n_fargen)
# Keep track of indexes.
idx_proband <- seq(1, n_fargen)
# Lower triangular matrix.
kc_tri <- kc_mat
kc_tri[upper.tri(kc_tri)] <- 0
diag(kc_tri) <- 0
# Check whether relationships above the specified degree exist.
cond <- sum(kc_tri > kc_thres) > 0
# While such relationships exist.
while(cond) {
# Count the number of first or second degree relationships per person.
n_related <- colSums(kc_tri[mask_related, mask_related] > kc_thres)
# Get the index of the individual with the highest number of these relationships.
# Resolve redundancies randomly by picking the first one.
idx <- idx_proband[mask_related][n_related == max(n_related)][1]
# Exclude this proband.
mask_related[idx] <- FALSE
# Update condition.
cond <- sum(kc_tri[mask_related, mask_related] > kc_thres) > 0
}
writeLines(sprintf("%d probands discarded due to high relatedness.", sum(!mask_related)))
probands = fargen_rin[mask_related]
n_probands = length(probands)
proband_kc_mat = kc_mat[probands, probands]
writeLines(sprintf("Working on %d individuals.", n_probands))
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region, useNA='ifany')
tbl / sum(tbl)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region)
tbl / sum(tbl)
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
tbl = table(regions, useNA='ifany')
tbl / sum(tbl)
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
tbl = table(regions,)
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
tbl = table(regions)
tbl / sum(tbl)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region)
tbl / sum(tbl)
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
tbl = table(regions)
tbl / sum(tbl)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region)
print(sum(regions_df$region == 'NA'))
tbl / sum(tbl)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region)
print(sum(regions_df$region == 1))
tbl / sum(tbl)
print(sum(regions_df$region == 1))
regions_df$region
is.na(regions_df$region)
sum(is.na(regions_df$region))
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region)
print(sum(is.na(regions_df$region)))
tbl / sum(tbl)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region)
n_total = length(regions_df$region)
n_na = sum(is.na(regions_df$region))
print(n_na / n_total)
print(sum(is.na(regions_df$region)))
tbl / sum(tbl)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
tbl = table(regions_df$region, useNA='ifany')
n_total = length(regions_df$region)
n_na = sum(is.na(regions_df$region))
print(n_na / n_total)
print(sum(is.na(regions_df$region)))
tbl / sum(tbl)
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
n_total = length(regions_df$region)
n_na = sum(is.na(regions_df$region))
print(n_na / n_total)
print(sum(is.na(regions_df$region)))
table(regions_df$region) / n_total
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
n_total = length(regions_df$region)
n_na = sum(is.na(regions_df$region))
print(n_na / n_total)
table(regions_df$region) / n_total
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
n_total = length(regions_df$region)
n_na = sum(is.na(regions_df$region))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total)
table(regions_df$region) / n_total
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
n_total = length(regions_df$region)
n_na = sum(is.na(regions_df$region))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
table(regions_df$region) / n_total
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
n_total = length(regions_df$region)
n_na = sum(is.na(regions_df$region))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions_df$region) / n_total
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
tbl = table(regions)
tbl / sum(tbl)
n_total = length(regions)
n_na = sum(is.na(regions))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions) / n_total
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
n_total = length(regions)
n_na = sum(is.na(regions))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions) / n_total
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[faregn_rin]
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[fargen_rin]
n_total = length(regions)
n_na = sum(is.na(regions))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions) / n_total
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
n_total = length(regions)
n_na = sum(is.na(regions))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions) / n_total
sum(names(regions) != colnames(proband_kc_mat))
kc_pc <- prcomp(proband_kc_mat, rank.=2, scale.=TRUE)
pc_df <- data.frame(kc_pc$x)
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank())
# Kinship threshold.
kc_thres <- 2^-4
# A mask vector of which individuals to include.
mask_related <- rep(TRUE, n_fargen)
# Keep track of indexes.
idx_proband <- seq(1, n_fargen)
# Lower triangular matrix.
kc_tri <- kc_mat
kc_tri[upper.tri(kc_tri)] <- 0
diag(kc_tri) <- 0
# Check whether relationships above the specified degree exist.
cond <- sum(kc_tri > kc_thres) > 0
# While such relationships exist.
while(cond) {
# Count the number of first or second degree relationships per person.
n_related <- colSums(kc_tri[mask_related, mask_related] > kc_thres)
# Get the index of the individual with the highest number of these relationships.
# Resolve redundancies randomly by picking the first one.
idx <- idx_proband[mask_related][n_related == max(n_related)][1]
# Exclude this proband.
mask_related[idx] <- FALSE
# Update condition.
cond <- sum(kc_tri[mask_related, mask_related] > kc_thres) > 0
}
writeLines(sprintf("%d probands discarded due to high relatedness.", sum(!mask_related)))
probands = fargen_rin[mask_related]
n_probands = length(probands)
proband_kc_mat = kc_mat[probands, probands]
writeLines(sprintf("Working on %d individuals.", n_probands))
regions_path = '/home/olavur/experiments/2020-06-16_aebs/data/placenames/rin_region.csv'
regions_df = read.csv(rin_region_path)
n_total = length(regions_df$region)
n_na = sum(is.na(regions_df$region))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions_df$region) / n_total
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
n_total = length(regions)
n_na = sum(is.na(regions))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions) / n_total
b
kc_pc <- prcomp(proband_kc_mat, rank.=2, scale.=TRUE)
pc_df <- data.frame(kc_pc$x)
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank())
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title='hey')
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_text('hey'))
blank
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Genealogical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank())
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Geographical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank())
labs(title="PCA of kinship", subtitle="Geographical stratification of the FarGen cohort", legend='hey) +
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Geographical stratification of the FarGen cohort", legend='hey') +
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Geographical stratification of the FarGen cohort") +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank())
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Geographical stratification of the FarGen cohort", color='Hey') +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5), legend.title=element_blank())
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Geographical stratification of the FarGen cohort", color='Hey') +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5))
ggplot(pc_df, aes(x=PC1, y=PC2)) +
geom_point(size=0.5, aes(color=factor(regions))) +
labs(title="PCA of kinship", subtitle="Geographical stratification of the FarGen cohort", color='Region') +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5))
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[!is.na(regions)]
regions[1:10]
#regions = regions[!is.na(regions)]
regions = regions[fargen_rin]
regions = regions_df$region
names(regions) = regions_df$ind
#regions = regions[!is.na(regions)]
regions = regions[fargen_rin]
length(regions)
length(regions[!is.na(regions)])
rin_no_na = fargen_rin[!is.na(regions)]
regions = regions[!is.na(regions)]
length(rin_no_na)
length(rin_no_na) == length(regions)
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[fargen_rin]
rin_no_na = fargen_rin[!is.na(regions)]
regions = regions[!is.na(regions)]
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[fargen_rin]
rin_no_na = fargen_rin[!is.na(regions)]
regions = regions[!is.na(regions)]
n_total = length(regions)
n_na = sum(is.na(regions))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions) / n_total
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
n_total = length(regions)
n_na = sum(is.na(regions))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions) / n_total
regions = regions_df$region
names(regions) = regions_df$ind
regions = regions[probands]
n_total = length(regions)
n_na = sum(is.na(regions))
writeLines(sprintf('Proportion of NA: %.4f', n_na / n_total))
writeLines('Proportion of each region:')
table(regions) / n_total
